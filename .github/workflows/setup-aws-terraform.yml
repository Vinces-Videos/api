name: 'Setup AWS with Terraform'

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  SECRETS_PARAM: -var="aws_access_id=${{ secrets.AWS_ACCESS_KEY_ID_TERRAFORM }}" -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY_TERRAFORM }}"
  BACKEND_CONFIG: -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID_TERRAFORM }}" -backend-config="secret_key=${{ secrets.AWS_ACCESS_KEY_TERRAFORM }}"
  TF_ENV_VARIABLES_FILE: test-env.tfvars
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: './Api/terraform-deployment'

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init ${{ env.BACKEND_CONFIG }}
        echo $(pwd)

    # Destroy existing environment to ensure clean slate
    - name: Terraform Destroy previous environment
      run: terraform destroy -auto-approve -input=false ${{ env.SECRETS_PARAM }} -var-file=${{inputs.environment}}-env.tfvars

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false ${{ env.SECRETS_PARAM }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false ${{ env.SECRETS_PARAM }} -var-file=${{env.TF_ENV_VARIABLES_FILE}}
